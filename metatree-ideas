

cachedPage getPage( openFile file, int dataOffset, int levelsAbove ) {
	   if ( levelsAbove == maxLevels( file, dataOffset ) {
	      return file->inodeCached;
	   } else {
	      cachedPage desired = checkHash( file, dataOffset, levelsAbove );
	      if ( desired == null ) {

	      	 cachedPage parent = getPage( file, dataOffset, levelAbove + 1);
		 pageAddr add = extractAdr( parent, file, dataOffset, levelsAbove );
		 if ( add != 0 ) {
		       desired = readIntoCache( adr, file, dataOffset, levelsAbove );
		 } else {
                       desired = allocatePageInCache( adr, file, dataOffset, levelsAbove );
		       memset( &desired->content, 0, sizeof( desired->content) );
		 }
	      }
	      return desired;
	  }
}


cachedPage writeData( openFile file, int dataOffset, char * data ) {
	   writeablePage dest = getFreePage( &state->freelists, file->mainExtentLog );
	   memcpy( dest->page.contents, data, sizeof( deat->page.contents ) );
	   cachedPage indirectPage = getPage( file, dataOffset, 1 );
	   updateIndirectPointer( indirectPage, file, dataOffset, dest->address );
	   writeNAND( & dest->page, dest->address, 0 );
	   addToCache( file, dataOffset, 0, dest );
}


/* TRADITIONAL UNBALANCED INDIRECT TREE APPROACH */
/* Given a page address, a open file, and a specific number of levels
   above the data page in the tree of indirect pages, this function's
   purpose is to calculate the address of the first data page associated
   with the indirect block that is the requested number of levels above
   the dataOffset value. This, together with the file number and a levelsAbove
   value of 0, should serve as a unique id for the indirect page within
   the file system cache.
 */
int getStartOfRange( openFile file, int dataOffset, int levelsAbove ) {
    if ( levelsAbove = 0 ) {
             return dataOffset;
    } else {
      int levelsToGo;
      if ( dataOffset < DIRECT_POINTERS*PAGESIZE ) {
          levelsToGo = 1 - levelsAbove;
          return 0;
      } else {
         int adjustedOffset = dataOffset - DIRECT_POINTERS*PAGESIZE;
	 int sizeOfLevel = PAGESIZE/PAGEADRSIZE*PAGESIZE;
	 levelsToGo = 1 - levelsAbove;
	 while ( adjustedOffset >= sizeOfLevel ) {
	       adjustedOffset = adjustedOffset - sizeOfLevel;
	       sizeOfLevel = sizeOfLevel * PAGESIZE/PAGEADRSIZE;
	       levelsToGo++;
	  }

         int unitSize = sizeOfLevel;
	 for ( int i = levelsToGo; i > 0; i-- ) {
	    unitSize = unitSize /( PAGESIZE/PAGEADRSIZE);
         }
	 return dataOffset/unitSize * unitSize;
	 
      
    }

}


	   


