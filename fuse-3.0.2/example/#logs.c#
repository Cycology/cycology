#include "fuseLogging.h"



// Place the blocks of a log back on the free lists and
// release the logs virtual address
void logs_recycle( logHeader log, CYCstate state ) {

  struct freeList freeList = state->lists;
  if (lastLogH->total == 1) {  //only 1 block in this log
	      
    if (lastLogH->active <= BLOCKSIZE - 3) {
      if (freeList.partialTail == 0) { //pList is empty
	freeList.partialHead = lastHeaderAddr + 1;
		  
      } else {                         //pList is not empty
	//make current last block points to new last block
	struct fullPage fPage;
	readNAND( & fPage, freeList.partialTail);
	fPage.nextLogBlock = lastHeaderAddr + 1;
	writeNAND( & fPage, freeList.partialTail, 1);
      }
      //change tail pointer
      freeList.partialTail = lastHeaderAddr + 1;
		
    } else {  //put in cList
      if (freeList.completeTail == 0) { //cList is empty
	//freeList.completeHead =
      }
    }
	      
  } else {
    // handle recycling logs with more than one block
  }
	    

}