#include <unistd.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "vNANDlib.h"

static struct fullPage page;
static struct fullPage superBlockPage;

int main (int argc, char *argv[])
{
  if (argc > 1) {        //Takes no arguments
    printf("ERROR: makefs TAKES NO ARGS\n");
    return -1;
  }

  struct nandFeatures features = initNAND();

  printf("NAND memory contains %d blocks. Total size in bytes is %d\n",
	 features.numBlocks,
	 features.memSize);
  
  // read superBlock from block 0
  readNAND( (char*) &superBlockPage, 0 );

  superPage superBlock = (superPage) & superBlockPage.contents;

  char *blockStat = (char *) malloc( features.numBlocks );
  memset( blockStat, 0, features.numBlocks );
  
  printf("Virtual address map stored at page %d\n",
	 superBlock->latest_vaddr_map);


  printf("Completely used block freelist starts at page %d and ends at %d\n    ",
	 superBlock->freeLists.completeHead,
	 superBlock->freeLists.completeTail);

  int freeBlockPtr = superBlock->freeLists.completeHead;
  int freeCount = 0;
  int previous = 0;
  while ( freeBlockPtr != 0 ) {
    freeCount++;
    
    printf( "%d, ", freeBlockPtr );
    if ( freeCount % 10 == 9 ) {
      printf("\n");
    }
    
    if ( blockStat[ freeBlockPtr/BLOCKSIZE] == 0 ) {
      blockStat[ freeBlockPtr/BLOCKSIZE ] = 1;
    } else {
      printf("\n\n****** CYCLE DETECTED IN FREE BLOCK LIST!\n");
      break;
    }

    previous = freeBlockPtr;
    readNAND( (char*) &page, freeBlockPtr + BLOCKSIZE - 1 );
    freeBlockPtr = page.nextLogBlock;

  }
  if ( previous != 0 && previous != superBlock->freeLists.completeTail ) {
    printf( "\n\n****** COMPLETELY USED BLOCK LIST TAIL INVALID IN SUPERBLOCK\n");
  }
    
  printf("\n\n");

  
  printf("Partially used block freelist starts at page %d and ends at %d\n",
	 superBlock->freeLists.partialHead,
	 superBlock->freeLists.partialTail);

  printf("\n\n");

  // Display vaddr map
  readNAND( (char *) &page , BLOCKSIZE );
  
  addrMap map = (addrMap) &page.contents;
  printf("Address map size = %d\n", map->size);

  int used = 0;
  for (int i; i < map->size; i++) {
    if( map->map[i] > 0 ) {
      used++;
      printf("       id %d maps to address %d\n", i, map->map[i] );
    }
  }

  int freePos = map->freePtr;
  freeCount = 0;
  if ( freePos != 0 ) {
    printf( "Free entries in address map include:\n     ");
    while ( freePos > 0 ) {
      printf( "%d, ", freePos );
      freePos = -map->map[freePos];
      freeCount++;
      if ( freeCount % 10 == 9 ) {
	printf("\n     ");
      }
    }
  } else {
    printf( "Free list in address map is empty \n" );
  }


  printf("Map of active pages\n");

  for ( int b = 2; b < features.numBlocks; b++ ) {
    if ( blockStat[ b ] == 0 ) {
      blockStat[b] = 3;

      printf( "Contents of used pages in block %d:\n", b );
      
      for ( int p = 0; p < BLOCKSIZE; p++ ) {
	int pAddr = b*BLOCKSIZE + p;

	readNAND( (char*) &page, pAddr );

	if ( page.pageType == PTYPE_ERASED ) {
	  break;
	}

	printf( "    Page %d:  ", pAddr );
	switch ( page.pageType ) {

	case PTYPE_INODE:
	  {
	    logHeader logH = (logHeader) & page.contents;
	    printf("Inode for file %d\n", logH->content.file.fInode.i_file_no );
	    printf("     Stored in log number %d\n", logH->content.file.fInode.i_log_no);
	    printf("     Referenced by %d links\n", logH->content.file.fInode.i_links_count );
	    printf("     File mode is %o\n", logH->content.file.fInode.i_mode );
	    printf("     File size is %ld with %d active pages\n",
		   logH->content.file.fInode.i_size,
		   logH->content.file.fInode.i_pages );
	    
		   

	  }
	  break;
	  
	}
      }
      
    }

  }

  
    
  stopNAND();
}
